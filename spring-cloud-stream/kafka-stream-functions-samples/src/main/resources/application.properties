spring.application.name=kafka-stream-sample

spring.kafka.bootstrap-servers=localhost:9092

# We can apply at binder to apply to all bindings
# could be: logAndContinue, logAndFailExceptionHandler or sendToDlq
# using dlq it will send do a dlq topic with the following pattern: error.<input-topic-name>.<application-id for kafka streams>
spring.cloud.stream.kafka.streams.binder.deserializationExceptionHandler=sendToDlq

# Enable metrics at actuator
management.health.binders.enabled=true
management.endpoint.health.show-details=ALWAYS

# Only
spring.cloud.stream.bindings.process-in-0.group=word-logger
spring.cloud.stream.bindings.process-in-0.destination: words
# We can also apply at binding level
spring.cloud.stream.kafka.streams.bindings.process-in-0.consumer.deserializationExceptionHandler=logAndContinue
# We also can customize the dlq name
spring.cloud.stream.kafka.streams.bindings.process-in-0.consumer.dlqName=process-messages-invalids

# Word Count
spring.cloud.stream.bindings.wordCountSingleOutput-in-0.group=word-coutner
spring.cloud.stream.bindings.wordCountSingleOutput-in-0.destination: words
spring.cloud.stream.bindings.wordCountSingleOutput-out-0.destination=counts

# Branching the result in multiple outputs
spring.cloud.stream.bindings.wordCountConditionedOutput-in-0.destination=words
spring.cloud.stream.bindings.wordCountConditionedOutput-out-0.destination=words-english
spring.cloud.stream.bindings.wordCountConditionedOutput-out-1.destination=words-french
spring.cloud.stream.bindings.wordCountConditionedOutput-out-2.destination=words-spanish
spring.cloud.stream.bindings.wordCountConditionedOutput-out-3.destination=words-invalid

# Consuming from Two Topics and producing to another
spring.cloud.stream.bindings.consumingFromTwoTopics-in-0.destination=clicks
spring.cloud.stream.bindings.consumingFromTwoTopics-in-1.destination=regions
spring.cloud.stream.bindings.consumingFromTwoTopics-out-0.destination=regionsClicks

spring.cloud.stream.bindings.consumingFromTwoTopicsAndNotProducing-in-0.destination=clicks,regions
#spring.cloud.stream.bindings.consumingFromTwoTopicsAndNotProducing-in-1.destination=regions
