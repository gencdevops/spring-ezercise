spring.application.name=kafka-events-consumer

spring.kafka.bootstrap-servers=${KAFKA_URL}

# we can have multiple clusters
# spring.cloud.stream.binders.kafka1.type=mainKafka
# spring.cloud.stream.binders.kafka1.environment.spring.cloud.stream.kafka.streams.binder.brokers=${KAFKA_URL}
# spring.cloud.stream.binders.kafka1.type=replicaKafka
# spring.cloud.stream.binders.kafka1.environment.spring.cloud.stream.kafka.streams.binder.brokers=${KAFKA_REPLICA_URL}

logging.level.org.springframework.amqp=DEBUG

# define the function to run
spring.cloud.function.definition=buyOrderLogger;sellOrderLogger

spring.cloud.stream.kafka.bindings.default.consumer.configuration.key.deserializer=org.apache.kafka.common.serialization.LongDeserializer

spring.cloud.stream.kafka.streams.binder.functions.buyOrderLogger.applicationId=buyOrderLogger
spring.cloud.stream.bindings.buyOrderLogger-in-0.destination=orders.buy
spring.cloud.stream.bindings.buyOrderLogger-in-0.group=buyOrderLogger
# spring.cloud.stream.bindings.process-in-0.binder=mainKafka
spring.cloud.stream.kafka.bindings.buyOrderLogger-in-0.consumer.configuration.key.deserializer=org.apache.kafka.common.serialization.LongDeserializer

spring.cloud.stream.kafka.streams.binder.functions.sellOrderLogger.applicationId=sellOrderLogger
spring.cloud.stream.bindings.sellOrderLogger-in-0.destination=orders.sell
spring.cloud.stream.bindings.sellOrderLogger-in-0.group=sellOrderLogger
spring.cloud.stream.kafka.bindings.sellorderLogger-in-0.consumer.configuration.key.deserializer=org.apache.kafka.common.serialization.LongDeserializer
