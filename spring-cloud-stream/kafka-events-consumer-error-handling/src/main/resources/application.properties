spring.application.name=kafka-events-consumer

spring.kafka.bootstrap-servers=${KAFKA_URL}

logging.level.org.springframework.amqp=DEBUG

# define the function to run
spring.cloud.function.definition=buyOrderErrorThrower;sellOrderErrorThrower;buyOrderDlqHandler

# options are: logAndFail, logAndContinue, sendToDlq
spring.cloud.stream.kafka.streams.binder.deserializationExceptionHandler=sendToDlq

# DLQ on simple consumer (type of `Consumer<T>`)
spring.cloud.stream.kafka.streams.binder.functions.buyOrderErrorThrower.applicationId=buyOrderErrorThrower
spring.cloud.stream.bindings.buyOrderErrorThrower-in-0.destination=orders.buy
spring.cloud.stream.bindings.buyOrderErrorThrower-in-0.group=buyOrderErrorThrower
spring.cloud.stream.kafka.bindings.buyOrderErrorThrower-in-0.consumer.enableDlq=true
spring.cloud.stream.kafka.bindings.buyOrderErrorThrower-in-0.consumer.dlqName=dlq.orders-processing
spring.cloud.stream.kafka.bindings.buyOrderErrorThrower-in-0.consumer.autoCommitOnError=true

# DLQ on stream consumer (type of `Consumer<KStream<K, T>>`)
spring.cloud.stream.kafka.streams.binder.functions.sellOrderErrorThrower.applicationId=sellOrderErrorThrower
spring.cloud.stream.bindings.sellOrderErrorThrower-in-0.destination=orders.sell
spring.cloud.stream.bindings.sellOrderErrorThrower-in-0.group=sellOrderErrorThrower
spring.cloud.stream.kafka.bindings.sellOrderErrorThrower-in-0.consumer.configuration.key.deserializer=org.apache.kafka.common.serialization.LongDeserializer
spring.cloud.stream.kafka.streams.bindings.sellOrderErrorThrower-in-0.consumer.deserializationExceptionHandler=sendToDlq
spring.cloud.stream.kafka.streams.bindings.sellOrderErrorThrower-in-0.consumer.dlqName=dlq.sell-orders-streaming

# DLQ handler
spring.cloud.stream.kafka.streams.binder.functions.buyOrderDlqHandler.applicationId=buyOrderDlqHandler
spring.cloud.stream.bindings.buyOrderDlqHandler-in-0.destination=dlq.orders-processing
spring.cloud.stream.bindings.buyOrderDlqHandler-in-0.group=buyOrderDlqHandler

